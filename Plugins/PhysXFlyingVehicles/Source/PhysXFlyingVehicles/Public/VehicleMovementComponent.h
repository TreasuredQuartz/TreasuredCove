// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "UObject/ObjectMacros.h"
#include "ChaosVehicleMovementComponent.h"
#include "VehicleMovementComponent.generated.h"

/**
 * Base Component holding common variables and functions useful to handling the vehicle simulation of an actor
 */
UCLASS(/*Abstract, hidecategories = (PlanarMovement, "Components|Movement|Planar", Activation, "Components|Activation")*/)
class PHYSXFLYINGVEHICLES_API UVehicleMovementComponent : 
	public UChaosVehicleMovementComponent
{
	GENERATED_BODY()

public:
	UVehicleMovementComponent();

public:
	void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;
	void Update(float DeltaTime) override;
	void UpdateState(float DeltaTime) override;

	float Mass;
	FVector Momentum;
	// FVector Velocity;
	FVector Acceleration;

	/* Gravity is a Vector Quantity with a direction always pointed toward the center
	* of the force. This comes from outside this component to calculate Weight.
	*/
	FVector Gravity;

	/* Lift is a Vector Quantity with a direction perpendicular to 
	* the flow direction. (Air, Water etc) This is perpendicular to our motion.
	* This acts through the center of pressure.
	*/
	FVector Lift;

	/* Thrust is a Vector Quantity with a direction. 
	*/
	FVector Thrust;

	/* Drag is a Vector Quantity generated by the difference in velocity between the 
	* object and the fluid. (Air, Water, etc) This is opposite to our motion.
	* This acts through the center of pressure.
	*/
	FVector Drag;

	/* Weight is a Vector Quantity generated through Mass * Gravity 
	* with a direction always facing toward the center of gravity 
	*/
	FVector Weight;

	/* NetForce. The solution of all acting forces on us. 
	*/
	FVector NetForce;

	virtual void UpdateDownwardForce(float DeltaTime);
	virtual void UpdateUpwardForce(float DeltaTime);
	virtual void UpdateForwardForce(float DeltaTime);
	virtual void UpdateBackwardForce(float DeltaTime);
	void SolveForNetForce();
};

//some helper functions for converting units

//rev per minute to rad/s
inline float RPMToOmega(float RPM)
{
	return RPM * PI / 30.f;
}

//rad/s to rev per minute
inline float OmegaToRPM(float Omega)
{
	return Omega * 30.f / PI;
}

//km/h to cm/s
inline float KmHToCmS(float KmH)
{
	return KmH * 100000.f / 3600.f;
}

inline float CmSToKmH(float CmS)
{
	return CmS * 3600.f / 100000.f;
}

inline float M2ToCm2(float M2)
{
	return M2 * 100.f * 100.f;
}

inline float Cm2ToM2(float Cm2)
{
	return Cm2 / (100.f * 100.f);
}